<div class="container-fluid desp">
	<h1>Insira seus alimentos aqui!</h1>
	<div class="row justify-content-around inserir">
		<div class="form-group" style="width: 700px;">
			<label for="NomeAlimento">Nome:</label>
			<input type="text" class="form-control mb-3" id="NomeAlimento" placeholder="Nome do Alimento"
				value="<%= nome %>">
			<label for="QntAlimento">Quantidade:</label>
			<input type="number" class="form-control mb-3" id="QntAlimento" placeholder="Quantidade">
			<label for="ValidadeAlimento">Validade:</label>
			<input type="date" class="form-control mb-3" id="ValidadeAlimento">
			<button class="btn btn-primary mt-3" style="background-color: #004828;" onclick="criar()">Criar Alimento</button>
			
		</div>
		<div class="image-container">
			<img src="/public/img/dsp.png" alt="Despensa" height="400px">
		</div>	
	</div>
	

	<h1 class="desp">Minha Despensa</h1>
	<div class="row justify-content-center" id="divContainer" data-aos="fade-up"></div>
</div>

<div class="modal" tabindex="-1" id="modalEditar">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Editar Alimento</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Fechar">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<input type="hidden" id="idAlimento">
				<div class="form-group">
					<label for="EditNome">Nome</label>
					<input class="form-control" type="text" id="EditNome">
				</div>
				<div class="form-group">
					<label for="EditQntAlimento">Quantidade</label>
					<input class="form-control" type="number" id="EditQntAlimento">
				</div>
				<div class="form-group">
					<label for="EditValidade">Validade</label>
					<input class="form-control" type="date" id="EditValidade">
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
				<button type="button" class="btn btn-primary" onclick="editarProduto()">Salvar</button>
			</div>
		</div>
	</div>
</div>



<script>
	let nome = document.getElementById("NomeAlimento");
	let qnt = document.getElementById("QntAlimento");
	let validade = document.getElementById("ValidadeAlimento");

	async function listar() {
		let divContainer = document.getElementById("divContainer");


		try {

			let response = await fetch("/listar");
			if (!response.ok) {
				throw new Error("Erro ao listar produtos");
			}

			let produtos = await response.json();


			let html = ``;

			produtos.forEach(produto => {
				html += `
					<div class="col-md-4 mx-1 despensa">
						<h4>${encode(produto.nome)}</h4>
						<p>Quantidade: ${produto.quantidade}</p>
						<p>Validade: ${produto.validade}</p>
						<button type="button" style="background-color: #004828" class="btn btn-primary" onclick="abrirModal(${produto.id})">Editar Produto</button>
						<button class="btn btn-danger" type="button" onclick="excluirProduto(${produto.id})">Excluir Produto</button>
						<hr>
					</div>
				`;
			});

			divContainer.innerHTML = html;
		} catch (error) {
			console.error("Erro ao listar produtos:", error.message);
			Swal.fire("Erro", "Erro ao listar produtos", "error");
		}
	}

	async function criar() {
		try {
			if (!nome.value || !qnt.value || !validade.value) {
				Swal.fire("Atenção", "Todos os campos são obrigatórios", "warning");
				return;
			}

			let dadosPenvio = {
				nome: nome.value,
				quantidade: qnt.value,
				validade: validade.value
			};

			let response = await fetch("/criar", {
				method: "POST",
				headers: {
					"Content-Type": "application/json"
				},
				body: JSON.stringify(dadosPenvio)
			});

			if (!response.ok) {
				throw new Error("Erro ao criar alimento");
			}

			nome.value = "";
			qnt.value = "";
			validade.value = "";

			await listar();

			Swal.fire("Sucesso", "Alimento criado com sucesso", "success");
		} catch (error) {
			console.error("Erro ao criar alimento:", error.message);
			Swal.fire("Erro", "Erro ao criar alimento", "error");
		}
	}

	async function abrirModal(id) {
		try {
			let response = await fetch(`/obter?id=${id}`);
			if (!response.ok) {
				throw new Error("Erro ao obter produto");
			}
			let produto = await response.json();

			document.getElementById("idAlimento").value = produto.id;
			document.getElementById("EditNome").value = produto.nome;
			document.getElementById("EditQntAlimento").value = produto.quantidade;
			document.getElementById("EditValidade").value = produto.validade;

			$("#modalEditar").modal("show");
		} catch (error) {
			console.error("Erro ao abrir modal de edição:", error.message);
			Swal.fire("Erro", "Erro ao abrir modal de edição", "error");
		}
	}

	async function editarProduto() {
		try {
			let id = document.getElementById("idAlimento").value;
			let nome = document.getElementById("EditNome").value;
			let quantidade = document.getElementById("EditQntAlimento").value;
			let validade = document.getElementById("EditValidade").value;

			if (!id || !nome || !quantidade || !validade) {
				Swal.fire("Atenção", "Todos os campos são obrigatórios", "warning");
				return;
			}

			let dadosPenvio = {
				id: id,
				nome: nome,
				quantidade: quantidade,
				validade: validade
			};

			let response = await fetch("/editar", {
				method: "POST",
				headers: {
					"Content-Type": "application/json"
				},
				body: JSON.stringify(dadosPenvio)
			});

			if (!response.ok) {
				throw new Error("Erro ao editar alimento");
			}

			$("#modalEditar").modal("hide");
			await listar();

			Swal.fire("Sucesso", "Alimento editado com sucesso", "success");
		} catch (error) {
			console.error("Erro ao editar alimento:", error.message);
			Swal.fire("Erro", "Erro ao editar alimento", "error");
		}
	}
	async function excluirProduto(id) {
		try {
			// Exibe o primeiro alerta de confirmação
			const result = await Swal.fire({
				title: "Você tem certeza?",
				text: "Essa ação não pode ser revertida!",
				icon: "warning",
				showCancelButton: true,
				cancelButtonText: "Cancelar",
				confirmButtonColor: "#3085d6",
				cancelButtonColor: "#d33",
				confirmButtonText: "Sim, exclua!"
			});

			if (result.isConfirmed) {
				// Se confirmado, exibe o alerta de excluído
				await Swal.fire({
					title: "Excluído!",
					text: "Seu arquivo foi excluído.",
					icon: "success"
				});

				// Faz a requisição para excluir o produto
				let response = await fetch(`/excluir?id=${id}`, {
					method: "DELETE"
				});

				if (!response.ok) {
					throw new Error("Erro ao excluir produto");
				}

				await listar();

				Swal.fire("Sucesso", "Produto excluído com sucesso", "success");
			} else {
				Swal.fire("Cancelado", "Seu produto está seguro :)", "error");
			}
		} catch (error) {
			console.error("Erro ao excluir produto:", error.message);
			Swal.fire("Erro", "Erro ao excluir produto", "error");
		}
	}


	function encode(str) {
		return str.replace(/[\u00A0-\u9999<>\&]/gim, function (i) {
			return '&#' + i.charCodeAt(0) + ';';
		});
	}

	listar();
</script>

<style>
	.despensa {
		border-radius: 10px;
		padding-top: 10px;
		margin-bottom: 10px;
		border: 5px solid #004828;
		background-color: #fdf7e1;
		color: #004828;
	}

	.inserir {
        align-items: center;
        background-color: #604C4C;
        padding: 20px;
        border-radius: 10px;
		background-image: url('https://www.transparenttextures.com/patterns/axiom-pattern.png');
	}
	.inserir label{
		color: #FDF7E1; 
		font-style: italic;
		font-size: xx-large;
	}

	.desp {
		background-color: #deb887;
		padding: 20px;
		border-radius: 10px;
	}

	.desp h1 {
		text-align: center;
		color: #004828;
	}
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.js"></script>
<script>
	AOS.init({
		duration: 1200,
	});
</script>